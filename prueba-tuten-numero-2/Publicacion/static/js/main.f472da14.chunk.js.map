{"version":3,"sources":["logo.svg","HoraUTC_REST.js","SeleccionarHoraGTM.js","App.js","reportWebVitals.js","index.js"],"names":["require","horaGTM","zonaHoraria","a","data","fetch","method","mode","headers","Headers","body","JSON","stringify","then","response","status","json","catch","err","console","error","valorRespuesta","CalcularHoraUTC","SeleccionarHoraGTM","props","hora","i","item","Valor","Selected","push","minSeg","state","horaSelect","minSelect","segSelect","zonaSelect","listadoCategoria","listadoPais","abrirModal","info","show","this","showCancel","showConfirm","showCloseButton","title","style","color","type","height","width","timeout","fluid","className","lg","md","small","noGutters","form","htmlFor","id","name","onChange","valor","document","getElementById","value","setState","slice","map","post","key","selected","onClick","min","seg","zona","H","toString","undefined","src","theme","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f472da14.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\r\nconst $ = require(\"jquery\");\r\n\r\nasync function CalcularHoraUTC(horaGTM, zonaHoraria) { \r\n  \r\n  let data = {\r\n        horaGTM: horaGTM,\r\n        zonaHoraria: zonaHoraria\r\n    }\r\n\r\n  let valorRespuesta = await fetch(\r\n    \"http://localhost:8080/RestJR/servicio/HoraZonaHoraria/obtenerHoraUTC\",\r\n    {\r\n      method: \"post\",\r\n      mode: 'no-cors', \r\n      'Content-Type': 'application/json',\r\n      headers: new Headers({\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      })      ,\r\n      body: JSON.stringify(data),\r\n    }\r\n  )\r\n    .then((response) => {\r\n      if(response.status === 200){  \r\n      return response.json();\r\n      }else{\r\n          return \"Error\";\r\n      }\r\n    }).catch(function (err) {\r\n        console.error(err);\r\n      });\r\n\r\n  return valorRespuesta;\r\n}\r\n\r\nexport default CalcularHoraUTC;\r\n","import React, { Component } from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  FormSelect,\r\n  Card,\r\n  CardBody,\r\n} from \"shards-react\";\r\nimport CalcularHoraUTC from \"./HoraUTC_REST\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass SeleccionarHoraGTM extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let hora = [];\r\n\r\n    for (let i = 1; i < 25; i++) {\r\n      let item = {\r\n        Valor: \"\",\r\n        Selected: false,\r\n      };\r\n      if (i < 10) {\r\n        item.Valor = \"0\" + i;\r\n        hora.push(item);\r\n      } else {\r\n        item.Valor = i;\r\n        hora.push(item);\r\n      }\r\n    }\r\n\r\n    let minSeg = [];\r\n\r\n    for (let i = 1; i < 60; i++) {\r\n      let item = {\r\n        Valor: \"\",\r\n        Selected: false,\r\n      };\r\n      if (i < 10) {\r\n        item.Valor = \"0\" + i;\r\n        minSeg.push(item);\r\n      } else {\r\n        item.Valor = i;\r\n        minSeg.push(item);\r\n      }\r\n    }\r\n\r\n    let zonaHoraria = [];\r\n\r\n    for (let i = -12; i < 13; i++) {\r\n      let item = {\r\n        Valor: \"\",\r\n        Selected: false,\r\n      };\r\n      if (i > -10 && i < 10) {\r\n        if (i > -10 && i < 0) {\r\n          item.Valor = \"-0\" + i * -1;\r\n          zonaHoraria.push(item);\r\n        } else if (i >= 0 && i < 10) {\r\n          item.Valor = \"0\" + i;\r\n          zonaHoraria.push(item);\r\n        }\r\n      } else {\r\n        item.Valor = i;\r\n        zonaHoraria.push(item);\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      hora: hora,\r\n      minSeg: minSeg,\r\n      zonaHoraria: zonaHoraria,\r\n      horaSelect: \"01\",\r\n      minSelect: \"01\",\r\n      segSelect: \"01\",\r\n      zonaSelect: \"-12\",\r\n      response: {},\r\n      listadoCategoria: [],\r\n      listadoPais: [],\r\n      abrirModal: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SweetAlert\r\n          info\r\n          show={this.state.abrirModal}\r\n          showCancel={false}\r\n          showConfirm={false}\r\n          showCloseButton={false}\r\n          title=\"Procesando la informaciÃ³n\"\r\n          style={{ color: \"black\" }}\r\n        >\r\n          <p>Espere mientra se realiza la consulta solicitada</p>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={300000} //3 secs\r\n          />\r\n        </SweetAlert>\r\n        <Container fluid className=\"main-content-container px-4 pb-4\">\r\n          <Row>\r\n            <Col lg=\"12\" md=\"12\">\r\n              <Card small className=\"mb-3\">\r\n                <CardBody>\r\n                  <Container fluid className=\"main-content-container px-4\">\r\n                    <Row\r\n                      style={{ color: \"black\" }}\r\n                      noGutters\r\n                      className=\"page-header py-4\"\r\n                    >\r\n                      Convertir hora GTM a UTC\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"12\">\r\n                        <Row style={{ color: \"black\" }} form>\r\n                          <Col md=\"4\" className=\"form-group\">\r\n                            <label htmlFor=\"listaHora\">Hora</label>\r\n                            <FormSelect\r\n                              id=\"listaHora\"\r\n                              name=\"listaHora\"\r\n                              style={{ color: \"black\" }}\r\n                              onChange={() => {\r\n                                let valor = document.getElementById(\"listaHora\")\r\n                                  .value;\r\n\r\n                                this.setState({ horaSelect: valor });\r\n                              }}\r\n                            >\r\n                              {this.state.hora\r\n                                .slice(0, 1000000)\r\n                                .map((post, key) => (\r\n                                  <option\r\n                                    value={post.Valor}\r\n                                    selected={post.Selected}\r\n                                  >\r\n                                    {post.Valor}\r\n                                  </option>\r\n                                ))}\r\n                            </FormSelect>\r\n                          </Col>\r\n                          <Col md=\"4\" className=\"form-group\">\r\n                            <label htmlFor=\"listaMinuto\">Minuto</label>\r\n                            <FormSelect\r\n                              id=\"listaMinuto\"\r\n                              name=\"listaMinuto\"\r\n                              onChange={() => {\r\n                                let valor = document.getElementById(\r\n                                  \"listaMinuto\"\r\n                                ).value;\r\n\r\n                                this.setState({ minSelect: valor });\r\n                              }}\r\n                            >\r\n                              {this.state.minSeg\r\n                                .slice(0, 1000000)\r\n                                .map((post, key) => (\r\n                                  <option\r\n                                    value={post.Valor}\r\n                                    selected={post.Selected}\r\n                                  >\r\n                                    {post.Valor}\r\n                                  </option>\r\n                                ))}\r\n                            </FormSelect>\r\n                          </Col>\r\n                          <Col md=\"4\" className=\"form-group\">\r\n                            <label htmlFor=\"listaSegundo\">Segundo</label>\r\n                            <FormSelect\r\n                              id=\"listaSegundo\"\r\n                              name=\"listaSegundo\"\r\n                              onChange={() => {\r\n                                let valor = document.getElementById(\r\n                                  \"listaSegundo\"\r\n                                ).value;\r\n\r\n                                this.setState({ segSelect: valor });\r\n                              }}\r\n                            >\r\n                              {this.state.minSeg\r\n                                .slice(0, 1000000)\r\n                                .map((post, key) => (\r\n                                  <option\r\n                                    value={post.Valor}\r\n                                    selected={post.Selected}\r\n                                  >\r\n                                    {post.Valor}\r\n                                  </option>\r\n                                ))}\r\n                            </FormSelect>\r\n                          </Col>\r\n                        </Row>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col lg=\"12\">\r\n                        <Row style={{ color: \"black\" }} form>\r\n                          <Col md=\"12\" className=\"form-group\">\r\n                            <label htmlFor=\"listaZonaHoraria\">\r\n                              Zona Horaria\r\n                            </label>\r\n                            <FormSelect\r\n                              id=\"listaZonaHoraria\"\r\n                              name=\"listaZonaHoraria\"\r\n                              style={{ color: \"black\" }}\r\n                              onChange={() => {\r\n                                let valor = document.getElementById(\r\n                                  \"listaZonaHoraria\"\r\n                                ).value;\r\n\r\n                                this.setState({ zonaSelect: valor });\r\n                              }}\r\n                            >\r\n                              {this.state.zonaHoraria\r\n                                .slice(0, 1000000)\r\n                                .map((post, key) => (\r\n                                  <option\r\n                                    value={post.Valor}\r\n                                    selected={post.Selected}\r\n                                  >\r\n                                    {post.Valor}\r\n                                  </option>\r\n                                ))}\r\n                            </FormSelect>\r\n                          </Col>\r\n                        </Row>\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Button\r\n            onClick={async () => {\r\n              this.setState({ abrirModal: true });\r\n\r\n              let hora = this.state.horaSelect;\r\n              let min = this.state.minSelect;\r\n              let seg = this.state.segSelect;\r\n              let zona = this.state.zonaSelect;\r\n\r\n              let H = hora + \":\" + min + \":\" + seg;\r\n\r\n              let response = await CalcularHoraUTC(H, zona.toString());\r\n\r\n              if (\r\n                response === null ||\r\n                response === undefined ||\r\n                response === \"Error\"\r\n              ) {\r\n                this.setState({\r\n                  response: {\r\n                    error: \"Error en la consulta.\",\r\n                  },\r\n                });\r\n              } else {\r\n                this.setState({ response: response });\r\n              }\r\n\r\n              this.setState({ abrirModal: false });\r\n            }}\r\n          >\r\n            CALCULAR ZONA HORARIA\r\n          </Button>\r\n          <br></br>\r\n          <br></br>\r\n          <label>RESULTADO DE LA CONSULTA :</label>\r\n          <ReactJson src={this.state.response} theme=\"monokai\" />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeleccionarHoraGTM;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\n\nimport \"react-dropdown/style.css\";\nimport SeleccionarHoraGTM from \"./SeleccionarHoraGTM\";\n\nfunction App() {\n  \n  return (\n    <div >\n      <header className=\"App-header\">\n        <SeleccionarHoraGTM/>        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}